// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Gumi",
            "url": "https://gumilho.com",
            "email": "gumilho2@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/search": {
            "get": {
                "description": "Search shows",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "search"
                ],
                "summary": "Search shows",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/shows": {
            "get": {
                "description": "List registered shows",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shows"
                ],
                "summary": "List registered shows",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Show"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Register show",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shows"
                ],
                "summary": "Register show",
                "parameters": [
                    {
                        "description": "Show payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.RegisterShowPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.Show"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/shows/{id}": {
            "delete": {
                "description": "Unregister show",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "shows"
                ],
                "summary": "Unregister show",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Show ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.RegisterShowPayload": {
            "type": "object",
            "required": [
                "main_picture",
                "title"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "main_picture": {
                    "type": "string",
                    "minLength": 1
                },
                "source": {
                    "type": "string"
                },
                "source_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "minLength": 1
                }
            }
        },
        "types.Show": {
            "type": "object",
            "properties": {
                "main_picture": {
                    "type": "string"
                },
                "mal_id": {
                    "description": "Use as primary key",
                    "type": "integer"
                },
                "source": {
                    "type": "string"
                },
                "source_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "GumiFetch",
	Description:      "Backend API for GumiFetch project",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
